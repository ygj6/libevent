---
name: linux

on:
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - '**.md'
      - '.mailmap'
      - 'ChangeLog*'
      - 'whatsnew*'
      - 'LICENSE'
  push:
    paths-ignore:
      - '**.md'
      - '.mailmap'
      - 'ChangeLog*'
      - 'whatsnew*'
      - 'LICENSE'

jobs:
  cmake:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        EVENT_MATRIX:
          - CDASH

    steps:
      - uses: actions/checkout@v2.0.0

      - name: Install valgrind
        run: sudo apt-get install valgrind

      - name: Cache Build
        uses: actions/cache@v1.1.0
        with:
          path: build
          key: ${{ matrix.os }}-cmake-${{ matrix.EVENT_MATRIX }}

      - name: Build And Test
        shell: bash
        run: |
          if [ "${{ matrix.EVENT_MATRIX }}" == "DISABLE_OPENSSL" ]; then
            EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_OPENSSL=ON"

          elif [ "${{ matrix.EVENT_MATRIX }}" == "DISABLE_THREAD_SUPPORT" ]; then
            EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_THREAD_SUPPORT=ON"

          elif [ "${{ matrix.EVENT_MATRIX }}" == "DISABLE_DEBUG_MODE" ]; then
            EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_DEBUG_MODE=ON"

          elif [ "${{ matrix.EVENT_MATRIX }}" == "DISABLE_MM_REPLACEMENT" ]; then
            EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_MM_REPLACEMENT=ON"

          elif [ "${{ matrix.EVENT_MATRIX }}" == "COMPILER_CLANG" ]; then
            EVENT_CMAKE_OPTIONS=""
            export CC=clang

          elif [ "${{ matrix.EVENT_MATRIX }}" == "TEST_EXPORT_STATIC" ]; then
            EVENT_CMAKE_OPTIONS="-DEVENT__LIBRARY_TYPE=STATIC -DEVENT__DISABLE_TESTS=ON -DEVENT__DISABLE_SAMPLES=ON"

          elif [ "${{ matrix.EVENT_MATRIX }}" == "TEST_EXPORT_SHARED" ]; then
            EVENT_CMAKE_OPTIONS="-DEVENT__LIBRARY_TYPE=SHARED -DEVENT__DISABLE_TESTS=ON -DEVENT__DISABLE_SAMPLES=ON"

          elif [ "${{ matrix.EVENT_MATRIX }}" == "ASAN" ]; then
            EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_REGRESS=ON -DEVENT__DISABLE_SAMPLES=ON"
            SAN_FLAGS="-fno-omit-frame-pointer -fsanitize=address -g"

          elif [ "${{ matrix.EVENT_MATRIX }}" == "UBSAN" ]; then
            EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_REGRESS=ON -DEVENT__DISABLE_SAMPLES=ON"
            SAN_FLAGS="-fsanitize=undefined -g"

          elif [ "${{ matrix.EVENT_MATRIX }}" == "CDASH" ]; then
            ctest -S cmake/memcheck.cmake -V
            exit 0

          else
            EVENT_CMAKE_OPTIONS=""
          fi

          #run build and test
          JOBS=20
          export CTEST_PARALLEL_LEVEL=$JOBS
          export CTEST_OUTPUT_ON_FAILURE=1
          mkdir -p build
          cd build
          echo [cmake]: cmake .. $EVENT_CMAKE_OPTIONS
          CFLAGS="$SAN_FLAGS" cmake .. $EVENT_CMAKE_OPTIONS
          cmake --build .
          if [ "${{ matrix.EVENT_MATRIX }}" == "TEST_EXPORT_STATIC" ]; then
            sudo python3 ../test-export/test-export.py static
          elif [ "${{ matrix.EVENT_MATRIX }}" == "TEST_EXPORT_SHARED" ]; then
            sudo python3 ../test-export/test-export.py shared
          else
            # cmake --build . --target verify
            ctest -V
          fi

      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: ${{ matrix.os }}-cmake-${{ matrix.EVENT_MATRIX }}-build
          path: build

  autotools:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        EVENT_MATRIX:
          - ASAN
          - UBSAN

    steps:
      - uses: actions/checkout@v2.0.0
      - name: Cache Build
        uses: actions/cache@v1.1.0
        with:
          path: build
          key: ${{ matrix.os }}-autotools-${{ matrix.EVENT_MATRIX }}

      - name: Build And Test
        shell: bash
        run: |
          if [ "${{ matrix.EVENT_MATRIX }}" == "DISABLE_OPENSSL" ]; then
            EVENT_CONFIGURE_OPTIONS="--disable-openssl"

          elif [ "${{ matrix.EVENT_MATRIX }}" == "DISABLE_THREAD_SUPPORT" ]; then
            EVENT_CONFIGURE_OPTIONS="--disable-thread-support"

          elif [ "${{ matrix.EVENT_MATRIX }}" == "DISABLE_DEBUG_MODE" ]; then
            EVENT_CONFIGURE_OPTIONS="--disable-debug-mode"

          elif [ "${{ matrix.EVENT_MATRIX }}" == "DISABLE_MM_REPLACEMENT" ]; then
            EVENT_CONFIGURE_OPTIONS="--disable-malloc-replacement"

          elif [ "${{ matrix.EVENT_MATRIX }}" == "COMPILER_CLANG" ]; then
            EVENT_CONFIGURE_OPTIONS=""
            export CC=clang

          elif [ "${{ matrix.EVENT_MATRIX }}" == "ASAN" ]; then
            EVENT_CONFIGURE_OPTIONS="--disable-samples"
            SAN_FLAGS="-fno-omit-frame-pointer -fsanitize=address -g"

          elif [ "${{ matrix.EVENT_MATRIX }}" == "UBSAN" ]; then
            EVENT_CONFIGURE_OPTIONS="--disable-samples"
            SAN_FLAGS="-fsanitize=undefined -g"

          else
            EVENT_CONFIGURE_OPTIONS=""
          fi

          #run build and test
          JOBS=20
          ./autogen.sh
          mkdir -p build
          cd build
          echo [configure]: CFLAGS="$SAN_FLAGS" ../configure $EVENT_CONFIGURE_OPTIONS
          CFLAGS="$SAN_FLAGS" ../configure $EVENT_CONFIGURE_OPTIONS
          make
          make -j $JOBS verify

      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: ${{ matrix.os }}-autotools-${{ matrix.EVENT_MATRIX }}-build
          path: build

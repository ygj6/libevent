# Run memcheck and upload the reseults to cdash
# Usage:
#   ctest -S cmake/memcheck.cmake

get_filename_component(CTEST_SOURCE_DIRECTORY  "${CTEST_SCRIPT_DIRECTORY}/.." ABSOLUTE)
set(CTEST_BINARY_DIRECTORY  "${CTEST_SOURCE_DIRECTORY}/build")
set(CTEST_CMAKE_GENERATOR   "Unix Makefiles")
set(CTEST_CONFIGURE_COMMAND  "cmake -DEVENT__DISABLE_REGRESS=OFF -DEVENT__DISABLE_SAMPLES=ON -DCMAKE_BUILD_TYPE=Debug ..")
set(CTEST_SITE               "github.com/libevent/libevent")
# set(CTEST_TIMEOUT            "7200")
set(ENV{LC_MESSAGES}         "en_EN")

macro(memcheck_prepare)
    if("${CTEST_MEMORYCHECK_TYPE}" STREQUAL "Valgrind")
        find_program(CTEST_MEMORYCHECK_COMMAND NAMES valgrind)
        if(NOT CTEST_MEMORYCHECK_COMMAND)
            message(FATAL_ERROR "Can not find valgrind")
        endif()
        set(CTEST_MEMORYCHECK_COMMAND_OPTIONS "-q --trace-children=yes --leak-check=full --track-origins=yes --show-leak-kinds=definite,possible --error-exitcode=1")
        set(CTEST_BUILD_NAME "valgrind-$ENV{CC}")
    else()
        if("${CTEST_MEMORYCHECK_TYPE}" STREQUAL "AddressSanitizer")
            set(SAN_OPTS "-g -O1 -fsanitize=address -fno-omit-frame-pointer -fPIC")
            set(CTEST_BUILD_NAME "asan-$ENV{CC}")
        elseif("${CTEST_MEMORYCHECK_TYPE}" STREQUAL "ThreadSanitizer")
            set(SAN_OPTS "-g -O1 -fsanitize=thread -fno-omit-frame-pointer -fPIC")
            set(CTEST_BUILD_NAME "tsan-$ENV{CC}")
        elseif("${CTEST_MEMORYCHECK_TYPE}" STREQUAL "MemorySanitizer")
            if(NOT CMAKE_C_COMPILER_ID MATCHES Clang)
                message(FATAL_ERROR "gcc can not support memory sanitizer")
            endif()
            set(SAN_OPTS "-g -O1 -fsanitize=memory -fno-omit-frame-pointer")
            set(CTEST_BUILD_NAME "msan-$ENV{CC}")
        elseif("${CTEST_MEMORYCHECK_TYPE}" STREQUAL "UndefinedBehaviorSanitizer")
            set(SAN_OPTS "-g -fsanitize=undefined -fno-omit-frame-pointer")
            set(CTEST_BUILD_NAME "ubsan-$ENV{CC}")
        else()
            message(FATAL_ERROR "Invalid value for CTEST_MEMORYCHECK_TYPE: ${CTEST_MEMORYCHECK_TYPE}\nThe invalid value is Valgrind, AddressSanitizer, ThreadSanitizer or MemorySanitizer")
        endif()
        file(WRITE "${CTEST_BINARY_DIRECTORY}/CMakeCache.txt" "
CMAKE_C_FLAGS=${SAN_OPTS}
CMAKE_CC_FLAGS=${SAN_OPTS}
")
    endif()
endmacro()

# foreach(TYPE Valgrind AddressSanitizer ThreadSanitizer UndefinedBehaviorSanitizer)
foreach(TYPE Valgrind)
    ctest_empty_binary_directory("${CTEST_BINARY_DIRECTORY}")
    message(STATUS "Memory check with ${TYPE}")
    set(CTEST_MEMORYCHECK_TYPE ${TYPE})
    memcheck_prepare()
    ctest_start("Experimental")
    ctest_configure()
    ctest_build()
    ctest_memcheck(RETURN_VALUE res)
    if(res)
        message(STATUS "Memory check with ${TYPE}: failed")
        ctest_submit()
        message(STATUS "View memory check results in https://my.cdash.org/index.php?project=libevent")
    else()
        message(STATUS "Memory check with ${TYPE}: passed")
    endif()
endforeach()
